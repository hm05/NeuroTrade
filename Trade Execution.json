{
  "name": "Trade Execution",
  "nodes": [
    {
      "parameters": {
        "url": "https://paper-api.alpaca.markets/v2/account",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "5d60061d-a70f-4769-bab2-28fd72cff83a",
      "name": "Alpaca-get-account-info",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3712,
        288
      ],
      "executeOnce": true,
      "typeVersion": 4.2,
      "credentials": {
        "httpCustomAuth": {
          "id": "ikaabRZGv3R1I9s1",
          "name": "Custom Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://paper-api.alpaca.markets/v2/orders",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"symbol\": \"{{$json.symbol.replace('.US', '')}}\",\n  \"qty\": \"{{ Math.floor($json.qty || $json.trade_size || 1) }}\",\n  \"side\": \"sell\",\n  \"type\": \"market\",\n  \"time_in_force\": \"day\"\n}\n",
        "options": {}
      },
      "id": "9d09f683-6b2b-4dbe-9822-c5d79fb23ef5",
      "name": "Alpaca-post-order-sell",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1232,
        368
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpCustomAuth": {
          "id": "ikaabRZGv3R1I9s1",
          "name": "Custom Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://paper-api.alpaca.markets/v2/orders",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendBody": true,
        "specifyBody": "=json",
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "jsonBody": "={\n  \"symbol\": \"{{$json.symbol.replace('.US', '')}}\",\n  \"qty\": \"{{ Math.floor($json.qty || $json.trade_size || 1) }}\",\n  \"side\": \"buy\",\n  \"type\": \"market\",\n  \"time_in_force\": \"day\"\n}\n",
        "options": {}
      },
      "id": "8c67b8ce-7f03-4f3f-8581-d455877d21cb",
      "name": "Alpaca-post-order-buy",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1232,
        192
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpCustomAuth": {
          "id": "ikaabRZGv3R1I9s1",
          "name": "Custom Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// --- filter_top_sentiment_score in n8n ---\n// Convert sentimentalScore to number, filter & sort descending\n\n// 1️⃣ Define how many top results you want\nconst topN = 5;\n\n// 2️⃣ Clean, convert, and sort\nconst cleaned = items\n  .map(item => {\n    const score = Number(item.json.sentimentalScore);\n    return { ...item, json: { ...item.json, sentimentalScore: score } };\n  })\n  .filter(item => !isNaN(item.json.sentimentalScore)) // remove blanks or invalids\n  .sort((a, b) => b.json.sentimentalScore - a.json.sentimentalScore)\n  .slice(0, topN);\n\n// 3️⃣ Return top-scoring items\nreturn cleaned;\n"
      },
      "id": "72f7647c-5409-4a76-b459-4d5fe7e4f429",
      "name": "filter_top_sentiment_score",
      "type": "n8n-nodes-base.code",
      "position": [
        -2848,
        288
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1nE2KG_micCqfqu0SKxm7_u_j4NqelQEcj18FXEFr1mc",
          "mode": "list",
          "cachedResultName": "NeuroTrade",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1nE2KG_micCqfqu0SKxm7_u_j4NqelQEcj18FXEFr1mc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 74712803,
          "mode": "list",
          "cachedResultName": "Sentiment Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1nE2KG_micCqfqu0SKxm7_u_j4NqelQEcj18FXEFr1mc/edit#gid=74712803"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "date",
              "lookupValue": "={{ $today }}"
            }
          ]
        },
        "combineFilters": "OR",
        "options": {}
      },
      "id": "7b923bda-1bee-4a3a-94f0-ec1ebd73eeb6",
      "name": "read_sentiments_score_today",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -3152,
        288
      ],
      "typeVersion": 4.6,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "B74O1vS6ljHUhodt",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1nE2KG_micCqfqu0SKxm7_u_j4NqelQEcj18FXEFr1mc",
          "mode": "list",
          "cachedResultName": "NeuroTrade",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1nE2KG_micCqfqu0SKxm7_u_j4NqelQEcj18FXEFr1mc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1412780622,
          "mode": "list",
          "cachedResultName": "Account Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1nE2KG_micCqfqu0SKxm7_u_j4NqelQEcj18FXEFr1mc/edit#gid=1412780622"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "date": "={{ $today }}",
            "balance": "={{ $json.equity }}",
            "change": "={{ ($json.equity- $json.last_equity)/ $json.last_equity }}"
          },
          "matchingColumns": [
            "date"
          ],
          "schema": [
            {
              "id": "date",
              "displayName": "date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "balance",
              "displayName": "balance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "change",
              "displayName": "change",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "useAppend": true
        }
      },
      "id": "8cd99b74-05f7-4514-9c65-b6e445a49ba7",
      "name": "write_account_balace_today",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -3424,
        288
      ],
      "typeVersion": 4.6,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "B74O1vS6ljHUhodt",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://paper-api.alpaca.markets/v2/positions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "9a78e6c5-5e12-4854-8174-66ab056aeda0",
      "name": "Alpaca_get_open_positions",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -2384,
        288
      ],
      "executeOnce": true,
      "typeVersion": 4.2,
      "alwaysOutputData": true,
      "credentials": {
        "httpCustomAuth": {
          "id": "ikaabRZGv3R1I9s1",
          "name": "Custom Auth account"
        }
      }
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "id": "0adabe59-4e04-4340-a53f-de3155f7e37e",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [
        -832,
        272
      ],
      "webhookId": "3d1031f5-7a20-4c3a-8791-748e93830402",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 15,
              "triggerAtMinute": {}
            }
          ]
        }
      },
      "id": "a6f36038-386f-4646-9bc6-2ca35ff906ea",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -3968,
        288
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "jsCode": "// --- SAFE ACCESS HELPERS ---\nfunction safeGet(nodeName) {\n  try {\n    const n = $node[nodeName];\n    if (!n) return [];\n    if (typeof n.all === \"function\") return n.all();\n    if (Array.isArray(n.json)) return n.json;\n    if (n.json) return [n.json];\n    return [];\n  } catch (e) {\n    console.log(`⚠️ Node \"${nodeName}\" not executed or empty`);\n    return [];\n  }\n}\n// -----------------------------------------------------------\n\n// 1️⃣ Gather data safely\nconst accountNode = safeGet(\"Alpaca-get-account-info\")[0]?.json || {};\nconst openPositionsRaw = safeGet(\"Alpaca_get_open_positions\");\nconst inputItems = $input.all();\n\n// 2️⃣ Normalize open positions from Alpaca\nconst openPositions = [];\nfor (const pos of openPositionsRaw) {\n  if (Array.isArray(pos.json?.body)) openPositions.push(...pos.json.body);\n  else if (pos.json?.symbol) openPositions.push(pos.json);\n}\nconst openSymbols = openPositions.map(p => p.symbol);\n\n// 3️⃣ Account info fallback\nconst availableCash = parseFloat(accountNode.cash ?? \"0\");\nconst equity = parseFloat(accountNode.equity ?? availableCash);\n\n// 4️⃣ Parameters\nconst MAX_ALLOCATION_PERCENT = 0.10;  // 10% per stock max\nconst MIN_SCORE_THRESHOLD = 0.5;      // min abs(score) to trade\n\nconst output = [];\n\nconsole.log(\"🧾 Incoming sentiment items:\", inputItems.length);\nconsole.log(\"💰 Account equity:\", equity, \"| Cash:\", availableCash);\nconsole.log(\"📦 Current holdings:\", openSymbols);\n\n// 5️⃣ Core logic\nfor (const item of inputItems) {\n  const symbol = item.json.stock || item.json.symbol;\n  const rawScore = (\n    item.json.sentimentalScore ??\n    item.json.sentimentScore ??\n    \"0\"\n  ).toString().trim();\n  const score = parseFloat(rawScore);\n\n  if (!symbol || isNaN(score)) {\n    console.log(`⚠️ Skipping invalid item:`, item.json);\n    continue;\n  }\n\n  const conviction = Math.max(0, (Math.abs(score) - MIN_SCORE_THRESHOLD) / (1.0 - MIN_SCORE_THRESHOLD));\n  const allocationPercent = MAX_ALLOCATION_PERCENT * conviction;\n  const notional = equity * allocationPercent;\n\n  let side = \"hold\"; // default action\n  let reason = \"\";\n\n  if (score >= MIN_SCORE_THRESHOLD && !openSymbols.includes(symbol)) {\n    side = \"buy\";\n    reason = \"Positive sentiment, not owned\";\n  } else if (score <= -MIN_SCORE_THRESHOLD && openSymbols.includes(symbol)) {\n    side = \"sell\";\n    reason = \"Negative sentiment, currently owned\";\n  } else {\n    reason = \"Hold condition (either weak sentiment or already aligned)\";\n  }\n\n  item.json.symbol = symbol;\n  item.json.sentimentScore = score;\n  item.json.side = side;\n  item.json.reason = reason;\n  item.json.notional = parseFloat(notional.toFixed(2));\n  item.json.allocationPercent = allocationPercent;\n\n  output.push(item);\n}\n\n// 6️⃣ Log summary\nconst buys = output.filter(i => i.json.side === \"buy\").map(i => i.json.symbol);\nconst sells = output.filter(i => i.json.side === \"sell\").map(i => i.json.symbol);\nconst holds = output.filter(i => i.json.side === \"hold\").map(i => i.json.symbol);\n\nconsole.log(`📈 BUY: ${buys.join(\", \") || \"None\"}`);\nconsole.log(`📉 SELL: ${sells.join(\", \") || \"None\"}`);\nconsole.log(`🤝 HOLD: ${holds.join(\", \") || \"None\"}`);\n\n// 7️⃣ Always return output (even if empty)\nif (output.length === 0) {\n  console.log(\"⚠️ No valid sentiment items received. Returning empty placeholder.\");\n  return [{ json: { message: \"No trades today\", side: \"none\" } }];\n}\n\nreturn output;\n"
      },
      "id": "0a339d4c-05a5-48eb-bd2e-65111a5e90e9",
      "name": "Calculate_Trade_Size_and_Side",
      "type": "n8n-nodes-base.code",
      "position": [
        -2608,
        288
      ],
      "typeVersion": 2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "// --- Normalize Alpaca positions response safely ---\n\n// Get full input item\nconst item = $input.first();\n\n// Handle missing input gracefully\nif (!item || !item.json) {\n  return [{ json: { noPositions: true } }];\n}\n\nconst input = item.json;\n\n// If Alpaca returned full HTTP response with 'body'\nif (Array.isArray(input.body)) {\n  if (input.body.length === 0) {\n    // No open positions\n    return [{ json: { noPositions: true } }];\n  }\n  // Return each position as its own item\n  return input.body.map(pos => ({ json: pos }));\n}\n\n// If Alpaca returned array directly (not wrapped)\nif (Array.isArray(input)) {\n  if (input.length === 0) {\n    return [{ json: { noPositions: true } }];\n  }\n  return input.map(pos => ({ json: pos }));\n}\n\n// If there's a single position object\nreturn [{ json: input }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2176,
        288
      ],
      "id": "eb10db63-69e9-4d2f-a980-1da83b6c3634",
      "name": "Normalize empty positions"
    },
    {
      "parameters": {
        "jsCode": "const topSentimentRaw = $(\"filter_top_sentiment_score\").all() || [];\nlet openPositions = $(\"Normalize empty positions\").all() || [];\nconst accountInfo = $(\"Alpaca-get-account-info\").first()?.json || {};\n\nconst getSymbol = (obj) => obj.json.symbol || obj.json.stock || \"\";\n\nconst topSentimentMap = new Map();\ntopSentimentRaw.forEach(item => {\n  const symbol = getSymbol(item);\n  if (symbol && !topSentimentMap.has(symbol)) {\n    const score = parseFloat(item.json.sentimentalScore || item.json.sentimentScore || \"0\");\n    topSentimentMap.set(symbol, { symbol, sentimentScore: score });\n  }\n});\nconst topSentiment = Array.from(topSentimentMap.values());\n\nconst openSymbols = openPositions.map(p => p.json.symbol);\nconst availableCash = parseFloat(accountInfo.cash || \"0\");\n\nconst positions_to_close = openPositions\n  .filter(p => {\n    const symbol = p.json.symbol;\n    const s = topSentiment.find(x => x.symbol === symbol);\n    return !s || s.sentimentScore <= 0;\n  })\n  .map(p => ({\n    symbol: p.json.symbol,\n    qty: parseFloat(p.json.qty || \"0\"),\n    market_value: parseFloat(p.json.market_value || \"0\"),\n    action: \"close\",\n    reason: \"Negative or missing sentiment → close position\"\n  }));\n\nconst positive = topSentiment.filter(s => s.sentimentScore > 0);\nlet newSymbols = positive.filter(s => !openSymbols.includes(s.symbol));\n\nif (openPositions.length === 0 && newSymbols.length === 0 && positive.length > 0)\n  newSymbols = positive.slice(0, 1);\n\nconst allocationFraction = 0.1;\nconst totalAllocation = availableCash * allocationFraction;\nconst valuePerSymbol = newSymbols.length > 0 ? totalAllocation / newSymbols.length : 0;\n\nconst positions_to_open = newSymbols.map(s => ({\n  symbol: s.symbol,\n  sentimentScore: s.sentimentScore,\n  market_value: parseFloat(valuePerSymbol.toFixed(2)),\n  action: \"open\",\n  reason: \"Positive sentiment → buy position\"\n}));\n\nconsole.log(\"✅ Positions to Open:\", positions_to_open);\nconsole.log(\"❌ Positions to Close:\", positions_to_close);\n\nreturn [{\n  json: {\n    positions_to_open,\n    positions_to_close\n  }\n}];\n"
      },
      "id": "cfc7657f-b741-4b25-aa13-123dde07eeb5",
      "name": "create_positions_to_close_and_positions_to_open",
      "type": "n8n-nodes-base.code",
      "position": [
        -1968,
        288
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// --- Split positions_to_open array into individual items ---\nconst data = $input.first().json;\n\nif (!data.positions_to_open || !Array.isArray(data.positions_to_open) || data.positions_to_open.length === 0) {\n  return [{ json: { message: \"No positions to open\" } }];\n}\n\n// Split into multiple items\nreturn data.positions_to_open.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1504,
        192
      ],
      "id": "a53a36a4-0471-4bfa-8247-26f19d16a10b",
      "name": "position_to_open"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\nif (!data.positions_to_close || !Array.isArray(data.positions_to_close) || data.positions_to_close.length === 0) {\n  return [{ json: { message: \"No positions to close\" } }];\n}\nreturn data.positions_to_close.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1504,
        368
      ],
      "id": "dfa7067d-c3f3-4670-8b1d-2f11156e86ef",
      "name": "position_to_close"
    },
    {
      "parameters": {
        "jsCode": "// ✅ Safely get node data only if executed\nfunction safeGet(nodeName) {\n  try {\n    const data = $(nodeName).all();\n    return Array.isArray(data) ? data : [];\n  } catch (e) {\n    return [];\n  }\n}\n\nconst buyOrders = safeGet(\"Alpaca-post-order-buy\");\nconst sellOrders = safeGet(\"Alpaca-post-order-sell\");\n\n// ✅ Merge and normalize\nconst merged = [...buyOrders, ...sellOrders].map(item => {\n  const o = item.json || {};\n  return {\n    symbol: o.symbol || null,\n    side: o.side || \"unknown\",\n    qty: o.qty ? Number(o.qty) : null,\n    status: o.status || \"unknown\",\n    created_at: o.created_at || new Date().toISOString(),\n    id: o.id || null,\n  };\n});\n\n// ✅ If no data found\nif (merged.length === 0) {\n  return [{ json: { message: \"No trades executed today\" } }];\n}\n\n// ✅ Return formatted results\nreturn merged.map(m => ({ json: m }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -608,
        272
      ],
      "id": "d8c0267e-6708-4ec3-b886-e7ea990cad2b",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1nE2KG_micCqfqu0SKxm7_u_j4NqelQEcj18FXEFr1mc",
          "mode": "list",
          "cachedResultName": "NeuroTrade",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1nE2KG_micCqfqu0SKxm7_u_j4NqelQEcj18FXEFr1mc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1325374813,
          "mode": "list",
          "cachedResultName": "Trade Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1nE2KG_micCqfqu0SKxm7_u_j4NqelQEcj18FXEFr1mc/edit#gid=1325374813"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "date": "={{ $today }}",
            "symbol": "={{ $json.symbol }}",
            "value": "={{ $json.qty && $json.price ? $json.qty * $json.price : 0 }}",
            "qty": "={{ $json.qty || 0 }}",
            "side": "={{ $json.side }}",
            "status": "={{ $json.status || \"pending\" }}",
            "created_at": "={{ $json.created_at || $now }}",
            "id": "={{ $json.id || \"\" }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "date",
              "displayName": "date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "symbol",
              "displayName": "symbol",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "value",
              "displayName": "value",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "side",
              "displayName": "side",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "qty",
              "displayName": "qty",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "644e1bf9-2fc9-4184-b2bf-2f1107a27ff1",
      "name": "Trade Log",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -32,
        128
      ],
      "typeVersion": 4.6,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "B74O1vS6ljHUhodt",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "7141060637",
        "text": "={{ \"Dear Harsh Murjani,\" }}\n{{ \"Thank you for choosing NeuroTrade here is your trade summary.\" }}\n{{ \"Symbol:\" + \" \" + $json.symbol }} \n{{ \"Side:\" + \" \" + $json.side }}\n{{ \"Quantity:\" + \" \" + $json.qty }}\n{{ \"Placed at:\" + \" \" + $json.created_at }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -32,
        352
      ],
      "id": "259f398c-5717-49bd-8e64-1993be3412e8",
      "name": "Harsh Message",
      "webhookId": "4ef808ef-8594-4dd5-9ae6-26c2f489af4d",
      "credentials": {
        "telegramApi": {
          "id": "KvHDot48Cxvpmj3G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "7410400473",
        "text": "={{ \"Dear Vidhi Harwani,\" }}\n{{ \"Thank you for choosing NeuroTrade here is your trade summary.\" }}\n{{ \"Symbol:\" + \" \" + $json.symbol }} \n{{ \"Side:\" + \" \" + $json.side }}\n{{ \"Quantity:\" + \" \" + $json.qty }}\n{{ \"Placed at:\" + \" \" + $json.created_at }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -32,
        512
      ],
      "id": "ceec5c2d-1b11-47be-8a0d-e655a79ee48c",
      "name": "Vidhi Message",
      "webhookId": "4ef808ef-8594-4dd5-9ae6-26c2f489af4d",
      "credentials": {
        "telegramApi": {
          "id": "KvHDot48Cxvpmj3G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "5607668626",
        "text": "={{ \"Dear Dhruv Prajapati,\" }}\n{{ \"Thank you for choosing NeuroTrade here is your trade summary.\" }}\n{{ \"Symbol:\" + \" \" + $json.symbol }} \n{{ \"Side:\" + \" \" + $json.side }}\n{{ \"Quantity:\" + \" \" + $json.qty }}\n{{ \"Placed at:\" + \" \" + $json.created_at }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -32,
        704
      ],
      "id": "85d77768-529c-48cf-8062-f19d2fc9c0c3",
      "name": "Dhruv Message",
      "webhookId": "4ef808ef-8594-4dd5-9ae6-26c2f489af4d",
      "credentials": {
        "telegramApi": {
          "id": "KvHDot48Cxvpmj3G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "neurotrade@harshmurjani.dev",
        "toEmail": "22it079@charusat.edu.in, 22it037@charusat.edu.in, 22it126@charusat.edu.in",
        "subject": "NeuroTrade Trade Summary",
        "html": "=<p>Dear User,</p>\n<p>Thank you for choosing NeuroTrade. Here is your trade summary:</p>\n<p>\n<strong>Symbol:</strong> {{ $json.symbol }}<br>\n<strong>Side:</strong> {{ $json.side }}<br>\n<strong>Quantity:</strong> {{ $json.qty }}<br>\n<strong>Placed at:</strong> {{ new Date($json.created_at).toISOString().split('T')[0] }}\n</p>\n<p>Regards,<br>NeuroTrade</p>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        -16,
        896
      ],
      "id": "6729680e-e776-4f3b-a02e-61fa4a956f14",
      "name": "Send email",
      "webhookId": "886e4194-70f3-4248-90b2-228532450203",
      "credentials": {
        "smtp": {
          "id": "fTWyrgH4eiJKfrkV",
          "name": "SMTP account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Wait": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Alpaca-get-account-info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alpaca-post-order-buy": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alpaca-post-order-sell": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alpaca-get-account-info": {
      "main": [
        [
          {
            "node": "write_account_balace_today",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alpaca_get_open_positions": {
      "main": [
        [
          {
            "node": "Normalize empty positions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter_top_sentiment_score": {
      "main": [
        [
          {
            "node": "Calculate_Trade_Size_and_Side",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "write_account_balace_today": {
      "main": [
        [
          {
            "node": "read_sentiments_score_today",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "read_sentiments_score_today": {
      "main": [
        [
          {
            "node": "filter_top_sentiment_score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate_Trade_Size_and_Side": {
      "main": [
        [
          {
            "node": "Alpaca_get_open_positions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize empty positions": {
      "main": [
        [
          {
            "node": "create_positions_to_close_and_positions_to_open",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create_positions_to_close_and_positions_to_open": {
      "main": [
        [
          {
            "node": "position_to_open",
            "type": "main",
            "index": 0
          },
          {
            "node": "position_to_close",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "position_to_open": {
      "main": [
        [
          {
            "node": "Alpaca-post-order-buy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "position_to_close": {
      "main": [
        [
          {
            "node": "Alpaca-post-order-sell",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Trade Log",
            "type": "main",
            "index": 0
          },
          {
            "node": "Harsh Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Vidhi Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Dhruv Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "67df82d3-7f8c-48ee-95ec-1a2f09ca1e46",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7e7d2b1057f5b6eb7d15a2d68b60cfd4ffbbcd0ea1e6f6366714fa6647466e53"
  },
  "id": "jAGsR0Mt24wIhzcQ",
  "tags": []
}